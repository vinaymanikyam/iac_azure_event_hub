on: pull_request

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: view the PR number
        run: |
          echo "PR number = ${{ github.event.pull_request.number }}"
          echo "PR number = ${{ env.PR_NUMBER }}"
          
      - name: view pr number
        run: | 
          eco "2PR number = ${{ github.event.pull_request.number }}"


# name: Terraform


# name: Manually triggered workflow

# on:
#   # Trigger the workflow on push or pull request,
#   # but only for the main branch
  
#   pull_request:
#     branches: [ develop ]
# #   push:
# #     branches:
# #       - develop

# env: 
#   PR_NUMBER: ${{ github.event.pull_request.number }}



          
#jobs:
#   say_hello:
#     runs-on: ubuntu-latest
#     steps:
# #       - run: |
# #           echo "GITHUB_SHA: ${GITHUB_SHA}"
    
  

# on:
#   workflow_dispatch:
#     inputs:
#       name:
#         description: 'namespace'
#         required: true
#         default: ci
#       home:
#         description: 'enter the model to full-refresh'
#         required: true
#         default: ' '

# jobs:
#   say_hello:
#     runs-on: ubuntu-latest
#     steps:
# #       - run: |
# #           echo "GITHUB_SHA: ${GITHUB_SHA}"
          
#       - uses: actions/checkout@v1
#       # Find the PR associated with this push, if there is one.
#       - uses: jwalton/gh-find-current-pr@v1
#         id: findPr
#         with:
#           # Can be "open", "closed", or "all".  Defaults to "open".
#           state: all
#       # This will echo "Your PR is 7", or be skipped if there is no current PR.
#       - run: echo "Your PR is ${PR}"
#         if: success() && steps.findPr.outputs.number
#         env:
#           PR: ${{ steps.findPr.outputs.pr }}

# on:
#   workflow_dispatch:
#     inputs:
#       name:   
#         desciption: 
  

# jobs:

#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     env:
#       ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
#       ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
#       ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
#       ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 0.14.0
#       # - name: Terraform Format
#       #   id: fmt
#       #   run: terraform fmt -check
#       - name: Terraform Init
#         id: init
#         run: terraform init 
#       - name: Terraform Plan
#         id: plan
#         #if: github.event_name == 'pull_request'
#         run: terraform plan -no-color --var-file=dev.tfvars
#         continue-on-error: true
#       - name: Terraform Apply
#         id: apply
#         #if: github.event_name == 'pull_request'
#         run: terraform apply -no-color --var-file=dev.tfvars --auto-approve
#         continue-on-error: true

